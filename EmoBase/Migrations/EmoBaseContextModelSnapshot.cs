// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmoBase.Migrations
{
    [DbContext(typeof(EmoBaseContext))]
    partial class EmoBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Basket", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<string>("Product")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId")
                        .HasName("PK__Basket__B40CC6CD8AFFEB2C");

                    b.ToTable("Basket", (string)null);
                });

            modelBuilder.Entity("Domain.Models.BuyHistory", b =>
                {
                    b.Property<int>("Userid")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Buyid")
                        .HasColumnType("datetime")
                        .HasColumnName("buyid");

                    b.HasKey("Userid", "ProductId")
                        .HasName("PK__BuyHisto__00E17E3B8614CD83");

                    b.HasIndex("ProductId");

                    b.ToTable("BuyHistory", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("Categoryid")
                        .HasColumnType("int")
                        .HasColumnName("categoryid");

                    b.Property<string>("Categoryname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoryname");

                    b.HasKey("Categoryid")
                        .HasName("PK__category__23CDE5908FEBBC0A");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<int>("Categoryid")
                        .HasColumnType("int")
                        .HasColumnName("categoryid");

                    b.Property<int>("Productid")
                        .HasColumnType("int")
                        .HasColumnName("productid");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.HasKey("Categoryid", "Productid")
                        .HasName("PK__products__111C97436F226216");

                    b.HasIndex("Productid");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Review", b =>
                {
                    b.Property<int>("Userid")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.Property<string>("Comment")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasColumnName("comment");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Userid")
                        .HasName("PK__reviews__CBA1B2571CAA06B3");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Userid")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.Property<string>("Login1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("login1");

                    b.Property<string>("Password1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password1");

                    b.Property<string>("Role1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role1");

                    b.HasKey("Userid")
                        .HasName("PK__users__CBA1B2572BA314F5");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.BuyHistory", b =>
                {
                    b.HasOne("Domain.Models.Basket", "Product")
                        .WithMany("BuyHistories")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_BuyHistory_Basket");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("BuyHistories")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("FK_BuyHistory_users");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("Categoryid")
                        .IsRequired()
                        .HasConstraintName("FK_products_category");

                    b.HasOne("Domain.Models.Basket", "ProductNavigation")
                        .WithMany("Products")
                        .HasForeignKey("Productid")
                        .IsRequired()
                        .HasConstraintName("FK_products_Basket");

                    b.Navigation("Category");

                    b.Navigation("ProductNavigation");
                });

            modelBuilder.Entity("Domain.Models.Review", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Models.Review", "Userid")
                        .IsRequired()
                        .HasConstraintName("FK_reviews_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Basket", "UserNavigation")
                        .WithOne("User")
                        .HasForeignKey("Domain.Models.User", "Userid")
                        .IsRequired()
                        .HasConstraintName("FK_users_Basket");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Domain.Models.Basket", b =>
                {
                    b.Navigation("BuyHistories");

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("BuyHistories");

                    b.Navigation("Review");
                });
#pragma warning restore 612, 618
        }
    }
}
